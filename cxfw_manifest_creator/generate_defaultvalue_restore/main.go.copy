package main

import (
	"bufio"
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strings"
)

type Manifest struct {
	Version    string      `json:"version"`
	Operations []Operation `json:"operations"`
}

type Operation struct {
	Type    string                       `json:"operation"`
	Entries map[string]map[string]string `json:"entries,omitempty"`
}

type OutputEntry struct {
	CurrentValue string `json:"current_value"`
	NewValue     string `json:"new_value"`
	Exists       bool   `json:"exists"`
}

type Output map[string]map[string]OutputEntry

func parseDefaultValues(filePath string) (map[string]map[string]string, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	sections := make(map[string]map[string]string)
	currentSection := "" // Default/unscoped section for KEY = VALUE entries

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		fmt.Printf("Debug: Processing line: %q\n", line)
		if line == "" || strings.HasPrefix(line, "#") || strings.HasPrefix(line, ";") {
			currentSection = "" // Reset to unscoped after blank line or comment
			fmt.Printf("Debug: Resetting to unscoped section\n")
			continue
		}

		if strings.HasPrefix(line, "[") && strings.HasSuffix(line, "]") {
			currentSection = strings.TrimSpace(line[1 : len(line)-1])
			fmt.Printf("Debug: Switching to section: %q\n", currentSection)
			if _, exists := sections[currentSection]; !exists {
				sections[currentSection] = make(map[string]string)
			}
			continue
		}

		if strings.Contains(line, "=") {
			parts := strings.SplitN(line, "=", 2)
			key := strings.TrimSpace(parts[0])
			value := strings.TrimSpace(parts[1])
			fmt.Printf("Debug: Found key-value: %s = %s in section %q\n", key, value, currentSection)
			if _, exists := sections[currentSection]; !exists {
				sections[currentSection] = make(map[string]string)
			}
			sections[currentSection][key] = value
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return sections, nil
}

func main() {
	inputFile := flag.String("input", "", "Path to the input JSON manifest file")
	flag.Parse()

	if *inputFile == "" {
		fmt.Println("Error: Please provide an input JSON file using --input")
		fmt.Println("Usage: ./program --input <path_to_json>")
		os.Exit(1)
	}

	manifestData, err := os.ReadFile(*inputFile)
	if err != nil {
		fmt.Printf("Error reading input file: %v\n", err)
		os.Exit(1)
	}

	var manifest Manifest
	if err := json.Unmarshal(manifestData, &manifest); err != nil {
		fmt.Printf("Error parsing JSON: %v\n", err)
		os.Exit(1)
	}

	var modifyDefaultsEntries map[string]map[string]string
	for _, op := range manifest.Operations {
		if op.Type == "modify_defaults" {
			modifyDefaultsEntries = op.Entries
			break
		}
	}

	if modifyDefaultsEntries == nil {
		fmt.Println("No 'modify_defaults' operation found in the manifest")
		os.Exit(0)
	}

	defaultValues, err := parseDefaultValues("/sda1/data/.defaultvalues")
	if err != nil {
		fmt.Printf("Error parsing .defaultvalues file: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Debug: Parsed .defaultvalues:")
	for section, keys := range defaultValues {
		fmt.Printf("Section: %q\n", section)
		for key, value := range keys {
			fmt.Printf("  %s = %s\n", key, value)
		}
	}

	output := make(Output)

	for sectionName, keys := range modifyDefaultsEntries {
		outputSectionName := sectionName
		iniSectionName := sectionName

		// Map "global" to unscoped section (KEY = VALUE format)
		if sectionName == "global" {
			iniSectionName = ""
			outputSectionName = "unscoped"
		}
		// Other sections (e.g., "New Section") are treated as INI format

		fmt.Printf("Debug: Processing section %q (mapped to %q in .defaultvalues)\n", outputSectionName, iniSectionName)

		if _, exists := output[outputSectionName]; !exists {
			output[outputSectionName] = make(map[string]OutputEntry)
		}

		for key, newValue := range keys {
			var currentValue string
			exists := false

			if sectionData, sectionExists := defaultValues[iniSectionName]; sectionExists {
				if val, keyExists := sectionData[key]; keyExists {
					currentValue = val
					exists = true
				}
			}
			fmt.Printf("Debug: Key %q - Current: %q, New: %q, Exists: %v\n", key, currentValue, newValue, exists)

			output[outputSectionName][key] = OutputEntry{
				CurrentValue: currentValue,
				NewValue:     newValue,
				Exists:       exists,
			}
		}
	}

	outputJSON, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		fmt.Printf("Error marshaling output JSON: %v\n", err)
		os.Exit(1)
	}

	outputFile := "defaultvalues_comparison.json"
	if err := os.WriteFile(outputFile, outputJSON, 0644); err != nil {
		fmt.Printf("Error writing output file: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Comparison JSON file created: %s\n", outputFile)
}
